// Code generated by mockery v2.37.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// ILogger is an autogenerated mock type for the ILogger type
type ILogger struct {
	mock.Mock
}

// Debug provides a mock function with given fields: ctx, args
func (_m *ILogger) Debug(ctx context.Context, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// Debugf provides a mock function with given fields: ctx, format, args
func (_m *ILogger) Debugf(ctx context.Context, format string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, ctx, format)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// Error provides a mock function with given fields: ctx, args
func (_m *ILogger) Error(ctx context.Context, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// Errorf provides a mock function with given fields: ctx, format, args
func (_m *ILogger) Errorf(ctx context.Context, format string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, ctx, format)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// Fatal provides a mock function with given fields: ctx, args
func (_m *ILogger) Fatal(ctx context.Context, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// Fatalf provides a mock function with given fields: ctx, format, args
func (_m *ILogger) Fatalf(ctx context.Context, format string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, ctx, format)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// Info provides a mock function with given fields: ctx, args
func (_m *ILogger) Info(ctx context.Context, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// Infof provides a mock function with given fields: ctx, format, args
func (_m *ILogger) Infof(ctx context.Context, format string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, ctx, format)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// Panic provides a mock function with given fields: ctx, args
func (_m *ILogger) Panic(ctx context.Context, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// Panicf provides a mock function with given fields: ctx, format, args
func (_m *ILogger) Panicf(ctx context.Context, format string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, ctx, format)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// Trace provides a mock function with given fields: ctx, args
func (_m *ILogger) Trace(ctx context.Context, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// Tracef provides a mock function with given fields: ctx, format, args
func (_m *ILogger) Tracef(ctx context.Context, format string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, ctx, format)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// Warn provides a mock function with given fields: ctx, args
func (_m *ILogger) Warn(ctx context.Context, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// Warnf provides a mock function with given fields: ctx, format, args
func (_m *ILogger) Warnf(ctx context.Context, format string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, ctx, format)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// NewILogger creates a new instance of ILogger. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewILogger(t interface {
	mock.TestingT
	Cleanup(func())
}) *ILogger {
	mock := &ILogger{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
